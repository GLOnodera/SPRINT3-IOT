import oracledb
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import numpy as np

def conectar():
    return oracledb.connect(user="rm553779", password="010205", dsn="oracle.fiap.com.br:1521/orcl")

conn = conectar()
cursor = conn.cursor()
print("Conexão estabelecida com sucesso!")

cursor.execute("""
    BEGIN
        EXECUTE IMMEDIATE '
            CREATE TABLE usuarios (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(100),
                email VARCHAR2(100) UNIQUE,
                senha VARCHAR2(100),
                pontos NUMBER DEFAULT 0
            )';
    EXCEPTION
        WHEN OTHERS THEN NULL;
    END;
""")

cursor.execute("""
    BEGIN
        EXECUTE IMMEDIATE '
            CREATE TABLE habitos_bucais (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                usuario_id NUMBER,
                escovacoes_dia NUMBER,
                uso_fio_dental NUMBER,
                refeicoes_dia NUMBER,
                FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
            )';
    EXCEPTION
        WHEN OTHERS THEN NULL;
    END;
""")

cursor.execute("""
    BEGIN
        EXECUTE IMMEDIATE '
            CREATE TABLE recompensas (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                descricao VARCHAR2(200),
                pontos_necessarios NUMBER
            )';
    EXCEPTION
        WHEN OTHERS THEN NULL;
    END;
""")

conn.commit()
print("Tabelas criadas (se não existiam).")

def cadastrar_usuario(nome, email, senha):
    conn = conectar()
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO usuarios (nome, email, senha) VALUES (:1, :2, :3)", (nome, email, senha))
        conn.commit()
        print("Usuário cadastrado com sucesso!")
    except oracledb.Error as e:
        print("Erro ao cadastrar usuário:", e)
    finally:
        cursor.close()
        conn.close()

def registrar_habitos(usuario_id, escovacoes, fio_dental, refeicoes):
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO habitos_bucais (usuario_id, escovacoes_dia, uso_fio_dental, refeicoes_dia)
        VALUES (:1, :2, :3, :4)
    """, (usuario_id, escovacoes, fio_dental, refeicoes))

    pontos_ganhos = (escovacoes * 2) + (fio_dental * 3) + (refeicoes * 1)
    cursor.execute("""
        UPDATE usuarios SET pontos = pontos + :1 WHERE id = :2
    """, (pontos_ganhos, usuario_id))
    
    conn.commit()
    cursor.close()
    conn.close()
    print("Hábitos registrados com sucesso!")

def consultar_pontos(usuario_id):
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT pontos FROM usuarios WHERE id = :1", (usuario_id,))
    pontos = cursor.fetchone()
    cursor.close()
    conn.close()

    if pontos:
        print(f"Você possui {pontos[0]} pontos.")
    else:
        print("Usuário não encontrado.")

def carregar_dados():
    conn = conectar()
    cursor = conn.cursor()
    cursor.execute("SELECT escovacoes_dia, uso_fio_dental, refeicoes_dia FROM habitos_bucais")
    dados = cursor.fetchall()
    cursor.close()
    conn.close()

    if not dados:
        return None
    
    df = pd.DataFrame(dados, columns=["escovacoes", "fio_dental", "refeicoes"])
    return df

def treinar_modelo():
    df = carregar_dados()
    
    if df is None or df.empty:
        print("Sem dados suficientes para treinar o modelo.")
        return

    df['recomendacao'] = np.where((df['escovacoes'] < 2) | (df['fio_dental'] == 0), 1, 0)
    
    X = df.drop(columns=['recomendacao'])
    y = df['recomendacao']
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    modelo = RandomForestClassifier()
    modelo.fit(X_train, y_train)
    
    y_pred = modelo.predict(X_test)
    
    acc = accuracy_score(y_test, y_pred)
    print(f"Acurácia do modelo: {acc:.2f}")
    print(classification_report(y_test, y_pred))

    df.hist(figsize=(10, 5))
    plt.suptitle("Distribuição dos Dados")
    plt.show()
    
    feature_importances = modelo.feature_importances_
    plt.bar(X.columns, feature_importances)
    plt.title("Importância das Features")
    plt.show()

    return modelo

modelo = treinar_modelo()
