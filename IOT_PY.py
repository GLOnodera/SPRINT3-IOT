import oracledb
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

conn = oracledb.connect(user="rm553779", password="010205", dsn="oracle.fiap.com.br:1521/orcl")
cursor = conn.cursor()

cursor.execute('''
    BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE usuarios (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            nome VARCHAR2(100),
            email VARCHAR2(100) UNIQUE,
            senha VARCHAR2(100),
            pontos NUMBER DEFAULT 0
        )';
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
''')

cursor.execute('''
    BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE habitos_bucais (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            usuario_id NUMBER,
            escovacoes_dia NUMBER,
            uso_fio_dental NUMBER,
            refeicoes_dia NUMBER,
            FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
        )';
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
''')

cursor.execute('''
    BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE recompensas (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            descricao VARCHAR2(200),
            pontos_necessarios NUMBER
        )';
    EXCEPTION WHEN OTHERS THEN NULL;
    END;
''')

conn.commit()

def cadastrar_usuario():
    nome = input("Nome: ")
    email = input("Email: ")
    senha = input("Senha: ")

    try:
        cursor.execute("INSERT INTO usuarios (nome, email, senha) VALUES (:1, :2, :3)", (nome, email, senha))
        conn.commit()
        print("Usuário cadastrado com sucesso!")
    except oracledb.Error as e:
        print("Erro ao cadastrar usuário:", e)

def registrar_habitos():
    usuario_id = int(input("ID do usuário: "))
    escovacoes = int(input("Quantas vezes escovou os dentes por dia? "))
    fio_dental = int(input("Usou fio dental? (0 - Não, 1 - Sim): "))
    refeicoes = int(input("Número de refeições diárias: "))

    cursor.execute("""
        INSERT INTO habitos_bucais (usuario_id, escovacoes_dia, uso_fio_dental, refeicoes_dia)
        VALUES (:1, :2, :3, :4)
    """, (usuario_id, escovacoes, fio_dental, refeicoes))

    pontos_ganhos = (escovacoes * 2) + (fio_dental * 3) + (refeicoes * 1)
    cursor.execute("""
        UPDATE usuarios SET pontos = pontos + :1 WHERE id = :2
    """, (pontos_ganhos, usuario_id))

    conn.commit()
    print("Hábitos registrados e pontos atualizados!")

def consultar_pontos():
    usuario_id = int(input("ID do usuário: "))
    cursor.execute("SELECT pontos FROM usuarios WHERE id = :1", (usuario_id,))
    pontos = cursor.fetchone()
    if pontos:
        print(f"Você possui {pontos[0]} pontos.")
    else:
        print("Usuário não encontrado.")

def cadastrar_recompensa():
    descricao = input("Descrição da recompensa: ")
    pontos_necessarios = int(input("Pontos necessários: "))

    cursor.execute("INSERT INTO recompensas (descricao, pontos_necessarios) VALUES (:1, :2)", 
                   (descricao, pontos_necessarios))
    conn.commit()
    print("Recompensa cadastrada!")

def resgatar_recompensa():
    nome_usuario = input("Nome do usuário: ")

    cursor.execute("SELECT id, pontos FROM usuarios WHERE nome = :1", (nome_usuario,))
    usuario = cursor.fetchone()

    if not usuario:
        print("Usuário não encontrado.")
        return

    usuario_id, pontos_usuario = usuario
    print(f"Você tem {pontos_usuario} pontos disponíveis.")

    cursor.execute("""
        SELECT id, descricao, pontos_necessarios FROM recompensas
        WHERE pontos_necessarios <= :1
        ORDER BY pontos_necessarios DESC
        FETCH FIRST 10 ROWS ONLY
    """, (pontos_usuario,))

    recompensas_disponiveis = cursor.fetchall()

    if not recompensas_disponiveis:
        print("Nenhuma recompensa disponível para seus pontos.")
        return

    print("\nRecompensas disponíveis:")
    for rec in recompensas_disponiveis:
        print(f"{rec[0]} - {rec[1]} (Custa {rec[2]} pontos)")

    recompensa_id = int(input("\nDigite o ID da recompensa desejada: "))

    recompensa_valida = any(rec[0] == recompensa_id for rec in recompensas_disponiveis)
    if not recompensa_valida:
        print("ID de recompensa inválido.")
        return

    cursor.execute("""
        UPDATE usuarios SET pontos = pontos - (
            SELECT pontos_necessarios FROM recompensas WHERE id = :1
        ) WHERE id = :2
    """, (recompensa_id, usuario_id))

    conn.commit()
    print("Recompensa resgatada com sucesso!")


def menu():
    while True:
        print("\n--- Menu Principal ---")
        print("1. Cadastrar Usuário")
        print("2. Registrar Hábitos Bucais")
        print("3. Consultar Pontos")
        print("4. Cadastrar Recompensa")
        print("5. Resgatar Recompensa")
        print("6. Sair")

        opcao = input("Escolha uma opção: ")

        if opcao == "1":
            cadastrar_usuario()
        elif opcao == "2":
            registrar_habitos()
        elif opcao == "3":
            consultar_pontos()
        elif opcao == "4":
            cadastrar_recompensa()
        elif opcao == "5":
            resgatar_recompensa()
        elif opcao == "6":
            print("Encerrando o programa.")
            cursor.close()
            conn.close()
            break
        else:
            print("Opção inválida. Tente novamente.")

menu()
